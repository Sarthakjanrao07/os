#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

sem_t writeLock;
sem_t readLock;
int readCount = 0;

void *reader(void *arg) {
    sem_wait(&readLock);
    readCount++;
    if (readCount == 1) {
        sem_wait(&writeLock);
    }
    sem_post(&readLock);

    printf("Reader %ld is reading\n");

    sem_wait(&readLock);
    readCount--;
    if (readCount == 0) {
        sem_post(&writeLock);
    }
    sem_post(&readLock);

    return NULL;
}

void *writer(void *arg) {
    sem_wait(&writeLock);

    printf("Writer %ld is writing\n");

    sem_post(&writeLock);

    return NULL;
}

int main() {
    pthread_t readers[3], writers[3];

    sem_init(&readLock, 0, 1);
    sem_init(&writeLock, 0, 1);

    for (int i = 0; i < 3; i++) {
        pthread_create(&readers[i], NULL, reader, NULL);
        pthread_create(&writers[i], NULL, writer, NULL);
    }

    for (int i = 0; i < 3; i++) {
        pthread_join(readers[i], NULL);
        pthread_join(writers[i], NULL);
    }

    sem_destroy(&readLock);
    sem_destroy(&writeLock);

    return 0;
}
