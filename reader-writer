#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
sem_t readLock, writeLock;  // Semaphores for readers and writers
int readerCount = 0;        // Count of active readers
void* reader(void* arg) {
    sem_wait(&readLock);    // Lock for reader count
    readerCount++;
    if (readerCount == 1)
        sem_wait(&writeLock);  // First reader locks the writer
    sem_post(&readLock);    // Release lock for reader count
    // Reading section
    printf("Reader is reading\n");
    sem_wait(&readLock);    // Lock for reader count
    readerCount--;
    if (readerCount == 0)
        sem_post(&writeLock);  // Last reader unlocks the writer
    sem_post(&readLock);    // Release lock for reader count
    return NULL;
#include<stdio.h>
#include<sys/types.h>
#include<stdlib.h>
#include<semaphore.h>
#include<pthread.h>
#define maxItem 5
#define bufferSize 5
sem_t full;
sem_t empty;
int in = 0, out = 0;
int buffer[bufferSize];
pthread_mutex_t mutex;
void *producer(void *pno) {
    int item;
    for (int i = 0; i < maxItem; i++) {
        item = rand();  // Generate random item
        sem_wait(&empty);  // Wait for empty space in buffer
        pthread_mutex_lock(&mutex);  // Lock access to the buffer
        buffer[in] = item;  // Insert item into buffer at position 'in'
        printf("Producer id %d: Insert %d at %d\n", *((int *)pno), item, in);
        in = (in + 1) % bufferSize;  // Move 'in' to next position
        pthread_mutex_unlock(&mutex);  // Unlock access to the buffer
        sem_post(&full);  // Signal that an item has been produced
    }
}

void* writer(void* arg) {
    sem_wait(&writeLock);   // Only one writer can access at a time
void *consumer(void *cno) {
    for (int i = 0; i < maxItem; i++) {
        sem_wait(&full);  // Wait for item in buffer
        pthread_mutex_lock(&mutex);  // Lock access to the buffer

    // Writing section
    printf("Writer is writing\n");
        int item = buffer[out];  // Remove item from buffer at position 'out'
        printf("Consumer id %d: Remove %d from %d\n", *((int *)cno), item, out);
        out = (out + 1) % bufferSize;  // Move 'out' to next position

    sem_post(&writeLock);   // Release lock for writers
    return NULL;
        pthread_mutex_unlock(&mutex);  // Unlock access to the buffer
        sem_post(&empty);  // Signal that space is available in the buffer
    }
}

int main() {
    pthread_t readers[3], writers[3];
    sem_init(&readLock, 0, 1);  // Initialize semaphore for readers
    sem_init(&writeLock, 0, 1); // Initialize semaphore for writers
    // Create reader and writer threads
    for (int i = 0; i < 3; i++) {
        pthread_create(&readers[i], NULL, reader, NULL);
        pthread_create(&writers[i], NULL, writer, NULL);
    pthread_t pro[5], con[5];
    pthread_mutex_init(&mutex, NULL);  // Initialize mutex
    sem_init(&empty, 0, bufferSize);   // Initialize semaphore for empty spaces
    sem_init(&full, 0, 0);             // Initialize semaphore for full spaces
    int a[5] = {1, 2, 3, 4, 5};  // Producer and consumer IDs
    // Create producer threads
    for (int i = 0; i < 5; i++) {
        pthread_create(&pro[i], NULL, (void *)producer, (void *)&a[i]);
    }

    // Wait for all threads to finish
    for (int i = 0; i < 3; i++) {
        pthread_join(readers[i], NULL);
        pthread_join(writers[i], NULL);
    // Create consumer threads
    for (int i = 0; i < 5; i++) {
        pthread_create(&con[i], NULL, (void *)consumer, (void *)&a[i]);
    }
    // Join all threads
    for (int i = 0; i < 5; i++) {
        pthread_join(pro[i], NULL);
    }
    for (int i = 0; i < 5; i++) {
        pthread_join(con[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&readLock);
    sem_destroy(&writeLock);
    pthread_mutex_destroy(&mutex);  // Destroy mutex
    sem_destroy(&full);             // Destroy full semaphore
    sem_destroy(&empty);            // Destroy empty semaphore

    return 0;
}
