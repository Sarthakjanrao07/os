#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

// Function to perform Bubble Sort
void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

// Function to perform Selection Sort
void selectionSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        // Swap
        int temp = arr[minIndex];
        arr[minIndex] = arr[i];
        arr[i] = temp;
    }
}

// Function to display the array
void displayArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    pid_t pid;
    int n;

    // Accept input from the user
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    // Dynamically allocate memory for the array
    int *arr = (int *)malloc(n * sizeof(int));
    if (arr == NULL) {
        printf("Memory allocation failed\n");
        return 1;  // Exit if memory allocation fails
    }

    // Accept integers from the user
    printf("Enter the integers to be sorted:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Fork a child process
    pid = fork();

    if (pid < 0) {
        // Fork failed
        perror("Fork failed");
        free(arr);  // Free allocated memory before exiting
        return 1;
    }

    if (pid == 0) {
        // Child process
        printf("\nChild Process (PID: %d) is sorting using Selection Sort:\n", getpid());
        selectionSort(arr, n);
        displayArray(arr, n);

        // Exit after sorting (Zombie demonstration happens here)
        printf("Child process (PID: %d) is exiting...\n", getpid());
        free(arr);  // Free allocated memory before exiting
        exit(0);
    } else {
        // Parent process
        printf("\nParent Process (PID: %d) is sorting using Bubble Sort:\n", getpid());
        bubbleSort(arr, n);
        displayArray(arr, n);

        // Uncomment the line below to simulate Zombie state
        // sleep(3);  // Simulate delay to allow the parent to exit before the child

        // Wait for child process to finish (Zombie cleanup happens here)
        printf("\nParent Process is waiting for the child process to finish...\n");
        wait(NULL);  // Wait for child process to terminate

        // Now the child process will be cleaned up and is no longer a zombie.
        printf("\nParent process (PID: %d) has finished and cleaned up child process\n", getpid());
        printf("Parent process (PID: %d) is exiting...\n", getpid());

        free(arr);  // Free allocated memory before exiting
    }

    return 0;
}
