#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

void bubble_sort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void print_array(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d integers: ", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Forking to create a child process
    pid_t p = fork();

    if (p < 0) {
        perror("Fork failed");
        return 1;
    }

    if (p == 0) {  // Child process block
        printf("Child process (PID: %d) is sorting the array...\n", getpid());
        
        // Child sorts the array
        bubble_sort(arr, n);
        
        printf("Sorted array by child: ");
        print_array(arr, n);

        // Simulate child completing early (Zombie state demonstration)
        printf("Child process (PID: %d) completed sorting and is now exiting.\n", getpid());
        exit(0);  // Exits without parent calling wait() immediately, making it a zombie process
    } 
    else {  // Parent process block
        // Parent waits a moment to demonstrate the child as a zombie
        sleep(2);  // This delay allows the child to exit first and become a zombie

        printf("Parent process (PID: %d) is sorting the array...\n", getpid());

        // Parent sorts the array
        bubble_sort(arr, n);
        
        printf("Sorted array by parent: ");
        print_array(arr, n);

        // Parent calling wait() to clean up zombie child
        wait(NULL);
        printf("Parent has waited for the child to prevent zombie.\n");

        // Orphan state demonstration
        printf("Parent process (PID: %d) exiting, making child an orphan if it was still running.\n", getpid());
        // Now, if the child was still running, it would be adopted by `init`.
    }

    return 0;
}
