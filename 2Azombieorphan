#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>

int main() {
    pid_t p;
    printf("before fork\n");

    p = fork();  // Create a child process

    if (p < 0) {
        perror("Fork failed");
        return 1;
    }

    if (p == 0) {  // Child process block
        printf("I am child having id %d\n", getpid());
        printf("My parent's id is %d\n", getppid());

        // Orphan state simulation
        sleep(5);  // This delay keeps the child alive after the parent has exited

        printf("Child (PID: %d) is now orphaned and adopted by init (PID: %d)\n", getpid(), getppid());
        exit(0);
    } else {  // Parent process block
        printf("My child's id is %d\n", p);
        printf("I am parent having id %d\n", getpid());

        // Zombie state simulation
        sleep(2);  // Allow child to finish and become a zombie

        printf("Parent process going to sleep, child should now be a zombie.\n");
        // Uncomment the next line to prevent the child from becoming a zombie
        // wait(NULL);  // Uncommenting this would collect the child process and prevent zombie state

        // The parent exits without waiting for the child, creating an orphan
        exit(0);  
    }

    printf("Common\n");  // Both parent and child will print this line
    return 0;
}
