#include <stdio.h>

#define MAX 10
#define RESOURCE_TYPES 3

// Function to check if a state is safe
int isSafe(int processes, int resources, int allocation[processes][resources], int max[processes][resources], int available[resources]) {
    int finish[processes], safeSeq[processes];
    int work[resources], count = 0;
    
    for (int i = 0; i < processes; i++) {
        finish[i] = 0;  // Mark all processes as unfinished
    }
    
    for (int i = 0; i < resources; i++) {
        work[i] = available[i];  // Initialize work vector with available resources
    }

    while (count < processes) {
        int found = 0;
        
        for (int p = 0; p < processes; p++) {
            if (!finish[p]) {
                int canAllocate = 1;
                for (int r = 0; r < resources; r++) {
                    if (max[p][r] - allocation[p][r] > work[r]) {
                        canAllocate = 0;
                        break;
                    }
                }
                
                if (canAllocate) {
                    // Allocate resources
                    for (int r = 0; r < resources; r++) {
                        work[r] += allocation[p][r];
                    }
                    finish[p] = 1;
                    safeSeq[count++] = p;
                    found = 1;
                }
            }
        }

        if (!found) {
            printf("System is not in Safe state...");
            return 0;  // If no process can be allocated, system is in an unsafe state
        }
    }

    // If we can finish all processes, the system is in a safe state
    printf("System is in a safe state.\nSafe Sequence: ");
    for (int i = 0; i < processes; i++) {
        printf("P%d ", safeSeq[i]);
    }
    printf("\n");
    
    return 1;
}

int main() {
    int processes, resources;
    
    printf("Enter number of processes: ");
    scanf("%d", &processes);
    printf("Enter number of resource types: ");
    scanf("%d", &resources);
    
    int allocation[processes][resources];
    int max[processes][resources];
    int available[resources];
    
    // Input allocation matrix
    printf("Enter allocation matrix:\n");
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            scanf("%d", &allocation[i][j]);
        }
    }

    // Input max matrix
    printf("Enter max matrix:\n");
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Input available resources
    printf("Enter available resources:\n");
    for (int i = 0; i < resources; i++) {
        scanf("%d", &available[i]);
    }

    // Check system safety
    isSafe(processes, resources, allocation, max, available);
    
    return 0;
}
